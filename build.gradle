println 'GradleTest root build.gradle'

buildscript {
    repositories {
        println '@root buildscript repositories'
        google()
        jcenter()
    }
    dependencies {
        println '@root buildscript  dependencies'
        classpath 'com.android.tools.build:gradle:3.6.2'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        println '@root gradle allprojects repositories'
        google()
        jcenter()
    }
    beforeEvaluate { project ->
//        println '@root allprojects beforeEvaluate can add apply plugin java for ' + project.properties
        println '@root allprojects beforeEvaluate can add apply plugin java for '
//        project.apply plugin: 'java'
    }
    afterEvaluate { project ->
//        println '@root  allprojects afterEvaluate  ' + project.properties
        println '@root  allprojects afterEvaluate  '
//        project.apply plugin: 'java'

    }
}

//task clean(type: Delete) {
//    delete rootProject.buildDir
//}

apply from: rootProject.file('tasks/tasks2.gradle')


//task cleanTemp(dependsOn: assemble) {
//    doLast {
//        println '清除所有临时文件'
//    }
//}

gradle.buildFinished {
    println 'root buildFinished '
}


project.afterEvaluate {
    println ' gradle.rootProject.afterEvaluate ************************* :  ' + project.name
//        assembleDebug.dependsOn cleanTemp
}

tasks.whenTaskAdded {
    task ->
        println 'root : ' + task.name + ' tasks.whenTaskAdded'
        def taskmodule = task.project
        def taskname = task.name

        if (task.name.equals("assembleDebug")) {
            println 'task.name.equals  afterAssembleDebug'
//            afterAssembleDebug.dependsOn assembleDebug
            custsTask.dependsOn assembleDebug
//            task.mustRunAfter afterAssembleDebug
            myFirstTask.dependsOn assembleDebug
        }

        if (task.name.contains("assembleDebug")) {
            task.getDependsOn().add({
                // add your logic here
                println 'root getDependsOn.add doLast afterAssembleDebug'
            })
        }

}

gradle.taskGraph.whenReady {
    taskGraph ->
        println 'root gradle.taskGraph.whenReady'
//    if (taskGraph.hasTask(release)) {
//        version = '1.0'
//    } else {
//        version = '1.0-SNAPSHOT'
//    }
}

task myFirstTask {
    doFirst {
        println "my first task is execuated"
    }
}

task mySecondTask {
    doFirst {
        println "my second task is execuated"
    }
}

task myTask {
    doFirst {
        println "my task is execuated"
    }
}

println 'run step by step'