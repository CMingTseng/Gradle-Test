// Top-level build file where you can add configuration options common to all sub-projects/modules.

println 'GradleTest build.gradle的配置阶段'


buildscript {
    
    repositories {
        println 'repositories中执行的代码'
        google()
        jcenter()
    }
    dependencies {
        println 'dependencies中执行的代码'
        classpath 'com.android.tools.build:gradle:3.1.3'
        

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}


allprojects {
    repositories {
        println 'repositories中执行的代码'
        google()
        jcenter()
    }
}

//task clean(type: Delete) {
//    delete rootProject.buildDir
//}

apply from: rootProject.file('tasks/tasks2.gradle')



//task cleanTemp(dependsOn: assemble) {
//    doLast {
//        println '清除所有临时文件'
//    }
//}

gradle.buildFinished {
    println 'root buildFinished '
}


project.afterEvaluate {
    println ' gradle.rootProject.afterEvaluate ************************* '
//        assembleDebug.dependsOn cleanTemp
}

tasks.whenTaskAdded {
       task ->
        println 'root '+task.name+'tasks.whenTaskAdded'
        if (task.name.equals("assembleDebug")) {
            println 'task.name.equals  afterAssembleDebug'
            afterAssembleDebug.dependsOn assembleDebug
        }

        if (task.name.contains("assembleDebug")) {
            task.getDependsOn().add({
                // add your logic here
                println 'root getDependsOn.add doLast afterAssembleDebug'
            })
        }
}

gradle.taskGraph.whenReady {
    taskGraph ->
//    println 'root gradle.taskGraph.whenReady'
//    if (taskGraph.hasTask(release)) {
//        version = '1.0'
//    } else {
//        version = '1.0-SNAPSHOT'
//    }
}


println '我是顺序执行的'