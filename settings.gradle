println 'at setting gradle start'
println 'gradle addListener '
gradle.addListener(new TaskExecutionListener() {
    @Override
    void beforeExecute(Task task) {
//        println("beforeExecute Show project : "+project) <-- Could not get unknown property 'project' for settings
        def taskmodule = task.project
        println("Show task group  : "+taskmodule)
        def taskname = task.name
        println("Show task name : "+taskname)
    }

    @Override
    void afterExecute(Task task, TaskState state) {
//        println("afterExecute Show project : "+project)<-- Could not get unknown property 'project' for settings
    }
})
println 'gradle addBuildListener '
gradle.addBuildListener(new BuildListener() {
    void buildStarted(Gradle var1) {
        println 'build Started'
    }
    void settingsEvaluated(Settings var1) {
        // var1.gradle.rootProject 这里访问Project对象时会报错，还未完成Project的初始化
        println 'settings Evaluated '
        def  keysets =var1.properties.keySet()
        keysets .findAll {

        }
        println 'Show rootDir : '+var1.properties.rootDir
        println 'Show gradleHome : '+var1.properties.startParameter.properties.gradleHomeDir
        println 'Show gradleUserHomeDir : '+var1.properties.startParameter.properties.gradleUserHomeDir
        println 'Show currentDir : '+var1.properties.startParameter.properties.currentDir
    }
    void projectsLoaded(Gradle var1) {
        println 'projects Loaded -- project init pass '
        println 'Show rootProject ：' + var1.gradle.rootProject
    }
    void projectsEvaluated(Gradle var1) {
        println 'projects  Evaluated'
    }
    void buildFinished(BuildResult var1) {
        println 'buildFinished '
    }
})

long beginOfSetting = System.currentTimeMillis()
gradle.projectsLoaded {
    println '@setting gradle.projectsLoaded Start projects Loaded init ， time ：' + (System.currentTimeMillis() - beginOfSetting) + 'ms'
    gradle.rootProject.afterEvaluate {
        println 'gradle.rootProject.afterEvaluate，time ：' + (System.currentTimeMillis() - beginOfSetting) + 'ms'
        println 'rootProject evaluated'
    }
}

gradle.beforeProject { project ->
    println '@setting gradle.beforeProject  apply plugin java for ' + project
    def keyset =project.properties.keySet()
    keyset.findAll {
//        println 'Show key  : '+it.toString()
    }
//    project.apply plugin: 'java'
}

include ':app', ':lib-java'
