println 'app   subproject (module) '
apply plugin: 'com.android.application'
println 'com.android.application finish '
android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "hytch.ftthemepark.gradle_test"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    println '@ app dependencies '
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

println 'app.dependencies finish '

task testaaa() {
    println 'Task  testaaa init'
    // 定义一个闭包
    def a = {
        println 'Task  testaaa def var a '
    }
    // 执行闭包
    a()
    doFirst {
        println 'Task  testaaa doFirst  but not run '
    }
}

apply from: rootProject.file('tasks/tasks1.gradle')
apply from: project.file('gradle/dyTask.gradle')

build.doLast {
    def today = new Date().format('yyyyMMdd')
    println 'build.doLast'
//    def name = 'authSdk';
//    copy{
//        from('build/intermediates/bundles/release')
//        into('output/' + today)
//        include('classes.jar')
//        rename('classes.jar', name +'-' + today + '-release' + '.jar')
//    }
}


gradle.buildFinished {
    println 'app buildFinished '
}

project.afterEvaluate {
    println 'app.afterEvaluate ************************* '
    assembleDebug.dependsOn beforeAssembleDebug
}

task beforeAssembleDebug() {
    doLast {
        println 'doLast beforeAssembleDebug'
    }
}

tasks.whenTaskAdded {
    task ->
        println 'app '+task.name+' tasks.whenTaskAdded'
//        if (task.name.equals("assembleDebug")) {
//            println 'app task.name.equals("assembleDebug")'
//            afterAssembleDebug
////            afterAssembleDebug.dependsOn assembleDebug
//        }

//        if (task.name.contains("assembleDebug")) {
        if (task.name.contains("mergeDexRelease")) {
            task.getDependsOn().add({
                // add your logic here
                println 'app getDependsOn doLast afterAssembleDebug'
//                afterAssembleDebug//可以直接执行这个task
                custsTask
            })
        }
}

gradle.taskGraph.whenReady {
    taskGraph ->
//    println 'app gradle.taskGraph.whenReady'
//    if (taskGraph.hasTask(release)) {
//        version = '1.0'
//    } else {
//        version = '1.0-SNAPSHOT'
//    }
}

println 'apply from init finish '